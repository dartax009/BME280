#ifndef _BME_280_H
#define _BME_280_H

#include <stdint.h>

/**
 * @brief Адреса регистров BME280
 *
 */
#define REG_ID_BME280			0xD0		///> Регистр ID датчика BME280
#define REG_STATUS_BME280		0xF3		///> Статусный регистр BME280
#define REG_RESET_BME280		0xE0		///> Регистр перезапуска BME280
#define REG_CONFIG_BME280		0xF5		///> Регистр конфигурации BME280
#define REG_CTRL_HUMID_BME280	0xF2		///> Регистр контроля влажности BME280
#define REG_CTRL_MEAS_BME280	0xF4		///> Регистр контроля измерений BM280
#define REG_TEMP_BME280			0xFA		///> Регистр температуры
#define REG_PRES_BME280			0xF7		///> Регистр давления
#define REG_HUM_BME280			0xFD		///> Регистр влажности

/**
 * @brief Калибровочные регистры
 *
 */
#define REG_DIG_T1_BME280	0x88
#define REG_DIG_T2_BME280	0x8A
#define REG_DIG_T3_BME280	0x8C
#define REG_DIG_P1_BME280	0x8E
#define REG_DIG_P2_BME280	0x90
#define REG_DIG_P3_BME280	0x92
#define REG_DIG_P4_BME280	0x94
#define REG_DIG_P5_BME280	0x96
#define REG_DIG_P6_BME280	0x98
#define REG_DIG_P7_BME280	0x9A
#define REG_DIG_P8_BME280	0x9C
#define REG_DIG_P9_BME280	0x9E
#define REG_DIG_H1_BME280	0xA1
#define REG_DIG_H2_BME280	0xE1
#define REG_DIG_H3_BME280	0xE3
#define REG_DIG_H4_BME280	0xE4
#define REG_DIG_H5_BME280	0xE5
#define REG_DIG_H6_BME280	0xE7

/**
 * @brief Заготовленные значения для BME280
 *
 */
#define VALUE_ID_BME280			0x60		///> ID BME280
#define VALUE_RESET_BME280		0xB6		///> Значение для перезагрузки BME280

#define STANDBY_0_5_BME280		0x00		///> Ожидание между замерами 0,5 мс
#define STANDBY_62_5_BME280		0x20		///> Ожидание между замерами 62,5 мс
#define STANDBY_125_0_BME280	0x40		///> Ожидание между замерами 125 мс
#define STANDBY_250_0_BME280	0x60		///> Ожидание между замерами 250 мс
#define STANDBY_500_0_BME280	0x80		///> Ожидание между замерами 500 мс
#define STANDBY_1000_0_BME280	0xA0		///> Ожидание между замерами 1000 мс
#define STANDBY_10_0_BME280		0xC0		///> Ожидание между замерами 10 мс
#define STANDBY_20_0_BME280		0xE0		///> Ожидание между замерами 20 мс

#define FILTER_OFF_BME280		0x00		///> Фильтр отключен
#define FILTER_2_BME280			0x04		///> Фильтр 2
#define FILTER_4_BME280			0x08		///> Фильтр 4
#define FILTER_8_BME280			0x0C		///> Фильтр 8
#define FILTER_16_BME280		0x10		///> Фильтр 16

#define HUM_SKIP_BME280			0x00		///> Оверсемплинг влажность отключена
#define HUM_OVERS_1_BME280		0x01		///> Оверсемплинг влажность x1
#define HUM_OVERS_2_BME280		0x02		///> Оверсемплинг влажность x2
#define HUM_OVERS_4_BME280		0x03		///> Оверсемплинг влажность x4
#define HUM_OVERS_8_BME280		0x04		///> Оверсемплинг влажность x8
#define HUM_OVERS_16_BME280		0x05		///> Оверсемплинг влажность x16

#define TEMP_SKIP_BME280		0x00		///> Оверсемплинг температуры отключен
#define TEMP_OVERS_1_BME280		0x20		///> Оверсемплинг температуры x1
#define TEMP_OVERS_2_BME280		0x40		///> Оверсемплинг температуры x2
#define TEMP_OVERS_4_BME280		0x60		///> Оверсемплинг температуры x4
#define TEMP_OVERS_8_BME280		0x80		///> Оверсемплинг температуры x8
#define TEMP_OVERS_16_BME280	0xA0		///> Оверсемплинг температуры x16

#define PRES_SKIP_BME280		0x00		///> Оверсемплинг давления отключен
#define PRES_OVERS_1_BME280		0x04		///> Оверсемплинг давления x1
#define PRES_OVERS_2_BME280		0x08		///> Оверсемплинг давления x2
#define PRES_OVERS_4_BME280		0x0C		///> Оверсемплинг давления x4
#define PRES_OVERS_8_BME280		0x10		///> Оверсемплинг давления x8
#define PRES_OVERS_16_BME280	0x14		///> Оверсемплинг давления x16

#define MODE_SLEEP_BME280		0x00		///> Режим сна
#define MODE_FORC_BME280		0x01		///> Режим принудительный
#define MODE_NORM_BME280		0x03		///> Режим нормальный

/**
 * @brief Маски для регистров BME280
 *
 */
#define M_STATUS_COPY_BME280		0x01		///> Регистр "статуса" бит 0 "копирование данных"
#define M_STATUS_TRANSFORM_BME280	0x08		///> Регистр "статуса" бит 3 "производится конвертация данных"
#define M_STATUS_SIGN_BME280		0x09		///> Значащие биты регистра "статус"

#define M_CONFIG_STANDBY_BME280		0xE0		///> Регистр "конфигурации" бит 5-7 "ожидание"
#define M_CONFIG_FILTER_BME280		0x1C		///> Регистр "конфигурации" бит 2-4 "фильтр"

#define M_CTRL_HUM_BME280			0x07		///> Регистр "контроль влажности" бит 0-2 "настройка влажности"

#define M_CTRL_MEAS_TEMP_BME280		0xE0		///> Регистр "контроль измерений" бит 5-7 "настройка тепературы"
#define M_CTRL_MEAS_PRES_BME280		0x1C		///> Регистр "контроль измерений" бит 2-4 "настройка давления"
#define M_CTRL_MEAS_MODE_BME280		0x03		///> Регистр "контроль измерений" бит 0-1 "настройка режима"

/**
 * @brief Структура для хранения калибровочных значений
 *
 */
typedef struct _s_trim_table
{
	uint16_t	dig_T1;			///> Температура 1
	int16_t		dig_T2;			///> Температура 2
	int16_t		dig_T3;			///> Температура 3
	uint16_t	dig_P1;			///> Давление 1
	int16_t		dig_P2;			///> Давление 2
	int16_t		dig_P3;			///> Давление 3
	int16_t		dig_P4;			///> Давление 4
	int16_t		dig_P5;			///> Давление 5
	int16_t		dig_P6;			///> Давление 6
	int16_t		dig_P7;			///> Давление 7
	int16_t		dig_P8;			///> Давление 8
	int16_t		dig_P9;			///> Давление 9
	uint8_t		dig_H1;			///> Влажность 1
	int16_t		dig_H2;			///> Влажность 2
	uint8_t		dig_H3;			///> Влажность 3
	int16_t		dig_H4;			///> Влажность 4
	int16_t		dig_H5;			///> Влажность 5
	int8_t		dig_H6;			///> Влажность 6

} s_trim_table;

/**
 * @brief Инициализация BME280 по i2c
 * Производит проверку ID устройства и считывания калибровочных параметров
 * @param addr		[in] - адрес устройства
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось прочитать ID датчика
 * [2] - ошибка. ID датчика не равно 0x60
 * [3] - ошибка. Проблемы в результате сброса
 */
uint8_t init_BME280_i2c (const uint8_t addr);

/**
 * @brief Инициализация BME280 по i2c по умолчанию
 * Производит инициализацию параметров по умолчанию
 * @param addr 		[in] - адрес устройства
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не успешная инициализация
 * [2] - ошибка. Не удалось установить задержку между измерениями
 * [3] - ошибка. Не удалось установить фильтр
 * [4] - ошибка. Не удалось установить значение оверсемплинга для температуры
 * [5] - ошибка. Не удалось установить значение оверсемплинга для давления
 * [6] - ошибка. Не удалось установить значение оверсемплинга для влажности
 * [7] - ошибка. Не удалось установить режим сбора данных измерений
 */
uint8_t def_init_BME280_i2c (const uint8_t addr);

/**
 * @brief Считать статус BME280 по i2c
 *
 * @param addr		[in]	- адрес устройства
 * @param data		[ont]	- значение статуса
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось прочитать статус
 */
uint8_t check_status_BME280_i2c (const uint8_t addr, uint8_t *data);

/**
 * @brief Считать калибровочные параметры BME280 по i2c
 * Не требует вызова со стороны пользователя
 * @param addr		[in]	- адрес устройства
 */
void read_coeff_BME280_i2c (const uint8_t addr);

/**
 * @brief Установить задержку между измерениями BME280 по i2c
 * Устанавливает задержку между измерениями датчика. Для корректной работы
 * рекомендуется использовать заготовленные значения.
 * @param addr		[in]	- адрес устройства
 * @param stend		[in]	- значение задержки между замерами
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось прочитать конфигурационный регистр
 * [2] - ошибка. Не удалось записать в конфигурационный регистр
 */
uint8_t set_standby_BME280_i2c (const uint8_t addr, const uint8_t stend);

/**
 * @brief Установить значение фильтра BME280 по i2c
 * Устанавливает фильтр для измерений. Для корректной работы
 * рекомендуется использовать заготовленные значения.
 * @param addr		[in]	- адрес устройства
 * @param filt		[in]	- значение фильтра
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось прочитать конфигурационный регистр
 * [2] - ошибка. Не удалось записать в конфигурационный регистр
 */
uint8_t set_filter_BME280_i2c (const uint8_t addr, const uint8_t filt);

/**
 * @brief Установить значение оверсемплинга для влажности BME280 по i2c
 * Устанавливает значение оверсемплинга для влажности. Для корректной работы
 * рекомендуется использовать заготовленные значения.
 * @param addr		[in]	- адрес устройства
 * @param over		[in]	- значение оверсемплинга для влажности
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось прочитать регистр оверсемплинга влажности
 * [2] - ошибка. Не удалось записать в регистр оверсемплинга влажности
 * [3] - ошибка. Не удалось просизвести контрольную запись
 */
uint8_t set_hum_overs_BME280_i2c (const uint8_t addr, const uint8_t over);

/**
 * @brief Установить значение оверсемплинга для температуры BME280 по i2c
 * Устанавливает значение оверсемплинга для температуры. Для корректной работы
 * рекомендуется использовать заготовленные значения.
 * ВНИМАНИЕ! Не рекомендуется отключать сбор данных температуры, так как она
 * используется при расчете давления и влажности
 * @param addr		[in]	- адрес устройства
 * @param over		[in]	- значение оверсемплинга для температуры
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось прочитать регистр оверсемплинга температуры
 * [2] - ошибка. Не удалось записать в регистр оверсемплинга температуры
 */
uint8_t set_temp_overs_BME280_i2c (const uint8_t addr, const uint8_t over);

/**
 * @brief Установить значение оверсемплинга для давления BME280 по i2c
 * Устанавливает значение оверсемплинга для давления. Для корректной работы
 * рекомендуется использовать заготовленные значения.
 * @param addr		[in]	- адрес устройства
 * @param over		[in]	- значение оверсемплинга для давления
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось прочитать регистр оверсемплинга давления
 * [2] - ошибка. Не удалось записать в регистр оверсемплинга давления
 */
uint8_t set_pres_overs_BME280_i2c (const uint8_t addr, const uint8_t over);

/**
 * @brief Установить режим сбора данных BME280 по i2c
 * Устанавливает значение режима сбора данных измерений. Для корректной работы
 * рекомендуется использовать заготовленные значения.
 * @param addr		[in]	- адрес устройства
 * @param mode		[in]	- режим сбора данных
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось считать конфигурационный регистр
 * [2] - ошибка. Не удалось записать в конфигурационный регистр
 */
uint8_t set_mode_BME280_i2c (const uint8_t addr, const uint8_t mode);

/**
 * @brief Прочитать температуру BME280 по i2c
 * Считывает измеренную температуру и производит необходимые вычисления.
 * Для получения значения с точностью после запятой, необходимо установить
 * параметр "конвертация" в "0" и произвести деление на 100.
 * @param addr		[in]	- адрес устройства
 * @param temp		[out]	- значение температуры
 * @param conv		[in]	- конвертация. 0 - не производить конвертацию полученного значения.
 * 1 - производить конвертацию полученного значения.
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось прочитать температуру
 */
uint8_t read_temp_BME280_i2c (const uint8_t addr, int32_t *temp, const uint8_t conv);

/**
 * @brief Прочитать давление BME280 по i2c
 * Считывает измеренную давление и производит необходимые вычисления.
 * Для получения значения с точностью после запятой, необходимо установить
 * параметр "конвертация" в "0" и произвести деление на 256.
 * @param addr		[in]	- адрес устройства
 * @param pres		[out]	- значение давления
 * @param conv		[in]	- конвертация. 0 - не производить конвертацию полученного значения.
 * 1 - производить конвертацию полученного значения.
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось прочитать давление
 * [2] - ошибка. Не удалось прочитать температуру для дальнейших расчетов
 */
uint8_t read_pres_BME280_i2c (const uint8_t addr, int32_t *pres, uint8_t conv);

/**
 * @brief Прочитать влажность BME280 по i2c
 * Считывает измеренную влажность и производит необходимые вычисления.
 * Для получения значения с точностью после запятой, необходимо установить
 * параметр "конвертация" в "0" и произвести деление на 1024.
 * @param addr		[in]	- адрес устройства
 * @param hum		[out]	- значение влажности
 * @param conv		[in]	- конвертация. 0 - не производить конвертацию полученного значения.
 * 1 - производить конвертацию полученного значения.
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось прочитать влажность
 * [2] - ошибка. Не удалось прочитать температуру для дальнейших расчетов
 */
uint8_t read_hum_BME280_i2c (const uint8_t addr, int32_t *hum, uint8_t conv);

/**
 * @brief Прочитать перевернутые регистр
 * Читает и переворачивает значение регистра BME. Используется в специфических случаях
 * @param data		[out]	- возвращаемое значение
 * @param reg		[in]	- регистр, откуда будет производиться чтение
 * @param addr		[in]	- адрес устройства
 * @return uint8_t - успешность исполнения
 * [0] - успешно
 * [1] - ошибка. Не удалось прочитать значение регистра
 */
uint8_t a_read_BME280_16b_r (uint16_t *data, uint8_t reg, uint8_t addr);

#endif